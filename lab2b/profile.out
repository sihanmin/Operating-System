Total: 1167 samples
     916  78.5%  78.5%      916  78.5% lock
     189  16.2%  94.7%      189  16.2% __strcmp_sse42
      33   2.8%  97.5%      129  11.1% SortedList_insert
      27   2.3%  99.8%      122  10.5% SortedList_lookup
       2   0.2% 100.0%        2   0.2% _init
       0   0.0% 100.0%     1167 100.0% __clone
       0   0.0% 100.0%     1167 100.0% start_thread
       0   0.0% 100.0%     1167 100.0% thread_work
ROUTINE ====================== thread_work in /u/cs/ugrad/sihan/CS111/proj/proj2b/lab2_list.c
     0   1167 Total samples (flat / cumulative)
     .      .  381:     
     .      .  382:     return 0;
     .      .  383: }
     .      .  384: 
     .      .  385: void *thread_work(void *argument)
---
     .      .  386: {
     .      .  387:     struct args * myargs = (struct args *) argument;
     .      .  388:     int place = myargs->place;
     .      .  389:     SortedList_t *nodes = myargs->nodes;
     .      .  390:     
     .      .  391:     // inserts nodes
     .      .  392:     int index;
     .      .  393:     long thr_time = 0;
     .      .  394:     for(int i = 0; i < it_num; i++)
     .      .  395:     {
     .      .  396:         index = hash(nodes[i].key);
     .    464  397:         lock(index, &thr_time);
     .    129  398:         SortedList_insert(&list[index], &nodes[i]);
     .      .  399:         unlock(index);
     .      .  400:     }
     .      .  401:     
     .      .  402:     // gets the list length
     .      .  403:     int total = 0;
     .      .  404:     for(int i = 0; i < list_num; i++)
     .      2  405:         lock(i, &thr_time);
     .      .  406:     for(int i = 0; i < list_num; i++)
     .      .  407:     {
     .      .  408:         int cur = SortedList_length(&list[i]);
     .      .  409:         if(cur == -1)
     .      .  410:         {
     .      .  411:             fprintf(stderr, "Corrupted list %d spotted at length counting!\n", i);
     .      .  412:             exit(2);
     .      .  413:         }
     .      .  414:         total += cur;
     .      .  415:     }
     .      .  416:     for(int i = 0; i < list_num; i++)
     .      .  417:         unlock(i);
     .      .  418:     
     .      .  419:     
     .      .  420:     // looks up and deletes each of the keys
     .      .  421:     SortedList_t *dtemp;
     .      .  422:     for(int i = 0; i <it_num; i++)
     .      .  423:     {
     .      .  424:         index = hash(nodes[i].key);
     .    321  425:         lock(index, &thr_time);
     .    122  426:         dtemp = SortedList_lookup(&list[index], nodes[i].key);
     .      .  427:         if(dtemp == NULL)
     .      .  428:         {
     .      .  429:             fprintf(stderr, "Corrupted list %d: missing inserted nodes!\n", index);
     .      .  430:             exit(2);
     .      .  431:         }
     .      .  432:         unlock(index);
     .    129  433:         lock(index, &thr_time);
     .      .  434:         if(SortedList_delete(dtemp) != 0)
     .      .  435:         {
     .      .  436:             fprintf(stderr, "Corrupted list %d spotted at deletion!\n", index);
     .      .  437:             exit(2);
     .      .  438:         }
     .      .  439:         
     .      .  440:         unlock(index);
     .      .  441:     }
     .      .  442:     
     .      .  443:     t_time[place] = thr_time;
     .      .  444:     return NULL;
     .      .  445: }
---
     .      .  446: 
     .      .  447: 
ROUTINE ====================== thread_work in /u/cs/ugrad/sihan/CS111/proj/proj2b/lab2_list.c
     0   1167 Total samples (flat / cumulative)
     .      .  381:     
     .      .  382:     return 0;
     .      .  383: }
     .      .  384: 
     .      .  385: void *thread_work(void *argument)
---
     .      .  386: {
     .      .  387:     struct args * myargs = (struct args *) argument;
     .      .  388:     int place = myargs->place;
     .      .  389:     SortedList_t *nodes = myargs->nodes;
     .      .  390:     
     .      .  391:     // inserts nodes
     .      .  392:     int index;
     .      .  393:     long thr_time = 0;
     .      .  394:     for(int i = 0; i < it_num; i++)
     .      .  395:     {
     .      .  396:         index = hash(nodes[i].key);
     .    464  397:         lock(index, &thr_time);
     .    129  398:         SortedList_insert(&list[index], &nodes[i]);
     .      .  399:         unlock(index);
     .      .  400:     }
     .      .  401:     
     .      .  402:     // gets the list length
     .      .  403:     int total = 0;
     .      .  404:     for(int i = 0; i < list_num; i++)
     .      2  405:         lock(i, &thr_time);
     .      .  406:     for(int i = 0; i < list_num; i++)
     .      .  407:     {
     .      .  408:         int cur = SortedList_length(&list[i]);
     .      .  409:         if(cur == -1)
     .      .  410:         {
     .      .  411:             fprintf(stderr, "Corrupted list %d spotted at length counting!\n", i);
     .      .  412:             exit(2);
     .      .  413:         }
     .      .  414:         total += cur;
     .      .  415:     }
     .      .  416:     for(int i = 0; i < list_num; i++)
     .      .  417:         unlock(i);
     .      .  418:     
     .      .  419:     
     .      .  420:     // looks up and deletes each of the keys
     .      .  421:     SortedList_t *dtemp;
     .      .  422:     for(int i = 0; i <it_num; i++)
     .      .  423:     {
     .      .  424:         index = hash(nodes[i].key);
     .    321  425:         lock(index, &thr_time);
     .    122  426:         dtemp = SortedList_lookup(&list[index], nodes[i].key);
     .      .  427:         if(dtemp == NULL)
     .      .  428:         {
     .      .  429:             fprintf(stderr, "Corrupted list %d: missing inserted nodes!\n", index);
     .      .  430:             exit(2);
     .      .  431:         }
     .      .  432:         unlock(index);
     .    129  433:         lock(index, &thr_time);
     .      .  434:         if(SortedList_delete(dtemp) != 0)
     .      .  435:         {
     .      .  436:             fprintf(stderr, "Corrupted list %d spotted at deletion!\n", index);
     .      .  437:             exit(2);
     .      .  438:         }
     .      .  439:         
     .      .  440:         unlock(index);
     .      .  441:     }
     .      .  442:     
     .      .  443:     t_time[place] = thr_time;
     .      .  444:     return NULL;
     .      .  445: }
---
     .      .  446: 
     .      .  447: 
